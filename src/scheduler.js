const schedule = require('node-schedule');
const { getCurrentDayAndTime } = require('./utils');
const { loadLocalScale } = require('./scaleService');
const bolsistasIds = require('../config/bolsistas_ids.json'); // Importa os IDs dos bolsistas

/**
 * Configura os agendamentos do bot.
 * @param {Object} client - O cliente do WhatsApp (whatsapp-web.js).
 */
function setupSchedules(client) {
    console.log('‚è∞ Configurando agendamentos...');

    // Agendar mensagem toda quinta-feira √†s 9h
    schedule.scheduleJob('0 9 * * 4', async () => {
        const { day, time } = getCurrentDayAndTime();
        console.log(`‚è∞ Executando tarefa agendada: ${day} √†s ${time}`);

        const escala = loadLocalScale();
        const proximoSabado = Object.keys(escala.escala)[0]; // Obt√©m a data do pr√≥ximo s√°bado
        const bolsista = escala.escala[proximoSabado]; // Nome do bolsista respons√°vel

        if (bolsista) {
            const id = bolsistasIds[bolsista]; // Obt√©m o ID do bolsista pelo nome
            if (id) {
                const mensagem = `üì¢ Aten√ß√£o! ${bolsista}, voc√™ est√° convocado para a escala do pr√≥ximo s√°bado (${proximoSabado}).`;
                await client.sendMessage(id, mensagem); // Envia a mensagem diretamente para o bolsista
                console.log(`‚úÖ Mensagem enviada para ${id}: ${mensagem}`);
            } else {
                console.log(`‚ö†Ô∏è ID n√£o encontrado para o bolsista ${bolsista}.`);
            }
        } else {
            console.log('‚ö†Ô∏è Nenhum bolsista encontrado para o pr√≥ximo s√°bado.');
        }
    });

    console.log('‚úÖ Agendamentos configurados com sucesso!');
}

module.exports = setupSchedules;